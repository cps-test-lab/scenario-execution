---
name: test-build
on:
  pull_request:
    branches: [main, humble, jazzy]
  push:
    branches: [main]
  workflow_dispatch:
  workflow_run:
    workflows: ["test-image"]
    types:
      - completed
concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions: read-all
jobs:
  build-and-push-testing:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      image_tag: ${{ steps.generate_tag.outputs.image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1
      with:
        fetch-depth: 0
    - name: Check if PR affects Docker image
      id: check
      run: |
        # Check if PR modifies files that affect the Docker image
        BASE_REF="${{ github.base_ref || 'main' }}"
        git fetch origin "$BASE_REF"
        
        CHANGED_FILES=$(git diff --name-only origin/$BASE_REF...HEAD)
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        
        # Files that trigger image rebuild
        IMAGE_AFFECTING_PATTERNS=(
          "deb_requirements.txt"
          ".github/workflows/Dockerfile"
          ".github/workflows/Dockerfile.testing"
          ".github/workflows/image.yml"
          ".devcontainer/Dockerfile"
          "package.xml"
        )
        
        BUILD_IMAGE="false"
        
        for pattern in "${IMAGE_AFFECTING_PATTERNS[@]}"; do
          if echo "$CHANGED_FILES" | grep -q "$pattern"; then
            echo "✅ Found changes affecting Docker image: $pattern"
            BUILD_IMAGE="true"
            break
          fi
        done
        echo "build_image=$BUILD_IMAGE" >> "$GITHUB_OUTPUT"
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d #v3.0.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 #v3.0.0
    - name: Generate image tag
      id: generate_tag
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          IMAGE_TAG="ghcr.io/cps-test-lab/scenario-execution-testing:pr-${{ github.event.pull_request.number }}"
        else
          IMAGE_TAG="ghcr.io/cps-test-lab/scenario-execution-testing:latest"
        fi
        echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
    - name: Build and push Docker testing image
      if: steps.check.outputs.build_image == 'true' || github.event_name != 'pull_request'
      id: build_image
      uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 #v5.0.0
      with:
        context: .
        file: .github/workflows/Dockerfile.testing
        push: true
        tags: ${{ steps.generate_tag.outputs.image_tag }}
        build-args: |
          ROS_DISTRO=jazzy
    - name: Tag and push latest image
      if: steps.check.outputs.build_image == 'false' && github.event_name == 'pull_request'
      id: tag_image
      run: |
        docker pull ghcr.io/cps-test-lab/scenario-execution-testing:latest
        docker tag ghcr.io/cps-test-lab/scenario-execution-testing:latest ${{ steps.generate_tag.outputs.image_tag }}
        docker push ${{ steps.generate_tag.outputs.image_tag }}
        # Get the digest of the pushed image
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ steps.generate_tag.outputs.image_tag }} | cut -d'@' -f2)
        echo "digest=$DIGEST" >> "$GITHUB_OUTPUT"
    - name: Delete untagged image versions
      if: github.event_name == 'pull_request'
      continue-on-error: true
      run: |
        PACKAGE_NAME="scenario-execution-testing"
        ORG="cps-test-lab"
        IMAGE_TAG="${{ steps.generate_tag.outputs.image_tag }}"
        
        # Get the digest from either build or tag step
        IMAGE_DIGEST="${{ steps.build_image.outputs.digest || steps.tag_image.outputs.digest }}"
        
        echo "Waiting for newly pushed image to be available in registry..."
        echo "Image tag: $IMAGE_TAG"
        echo "Image digest: $IMAGE_DIGEST"
        
        # Wait for the image digest to be available (max 30s)
        for i in {1..30}; do
          if [ -n "$IMAGE_DIGEST" ]; then
            # Check if the digest is available in the registry
            if docker pull "${IMAGE_TAG%:*}@${IMAGE_DIGEST}" > /dev/null 2>&1; then
              echo "✅ Image digest $IMAGE_DIGEST is available in registry"
              break
            fi
          else
            exit 1
          fi
          echo "⏳ Waiting for image to be available (attempt $i/24)..."
          sleep 2
        done
        
        echo "Checking for untagged image versions..."
        
        VERSIONS=$(curl -s -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          "https://api.github.com/orgs/${ORG}/packages/container/${PACKAGE_NAME}/versions" 2>/dev/null || echo "[]")
        
        # Get current time and calculate threshold (5 minutes ago)
        THRESHOLD_DATE=$(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%SZ)
        
        # Find untagged versions older than 5 minutes
        UNTAGGED_IDS=$(echo "$VERSIONS" | jq -r --arg threshold "$THRESHOLD_DATE" '.[] | select(.metadata.container.tags | length == 0) | select(.created_at < $threshold) | .id')
        
        if [ -n "$UNTAGGED_IDS" ]; then
          echo "Found old untagged versions, deleting..."
          for VERSION_ID in $UNTAGGED_IDS; do
            echo "Deleting untagged version ID: $VERSION_ID"
            
            HTTP_CODE=$(curl -s -w "%{http_code}" -o /dev/null -L \
              -X DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/orgs/${ORG}/packages/container/${PACKAGE_NAME}/versions/${VERSION_ID}")
            
            if [ "$HTTP_CODE" = "204" ] || [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Deleted untagged version $VERSION_ID"
            else
              echo "⚠️ Failed to delete version $VERSION_ID (HTTP $HTTP_CODE)"
            fi
          done
        else
          echo "ℹ️ No old untagged versions found"
        fi
  
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [build-and-push-testing]
    env:
      IMAGE_TAG: ${{ needs.build-and-push-testing.outputs.image_tag }}
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1
        with:
          submodules: true
      - name: Build
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          git clone https://github.com/ros-navigation/nav2_minimal_turtlebot_simulation.git
          cd nav2_minimal_turtlebot_simulation
          git checkout f4eefd049359b3f0becabd7a0870005f4140ec08
          cd ..
          colcon build --continue-on-error
          source install/setup.bash
      - name: Cache Build
        id: cache-test-id
        uses: actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: .
          key: ${{ runner.os }}-build-${{ github.run_number }}
  test-scenario-execution:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          export -n CYCLONEDDS_URI
          export ROS_DOMAIN_ID=2
          colcon test --packages-select \
          scenario_execution \
          scenario_execution_os \
          scenario_execution_coverage \
          scenario_execution_test \
          --event-handlers console_direct+ \
          --return-code-on-test-failure \
          --pytest-args \
          --junit-xml=TEST.xml
          # Add "--capture=no" to see output of tests
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-scenario-execution
          path: ./**/TEST.xml
  test-scenario-execution-ros:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          export -n CYCLONEDDS_URI
          export ROS_DOMAIN_ID=2
          colcon test --packages-select \
          scenario_execution_ros \
          scenario_execution_ros_test \
          --event-handlers console_direct+ \
          --return-code-on-test-failure \
          --pytest-args \
          --junit-xml=TEST.xml
          # Add "--capture=no" to see output of tests
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-scenario-execution-ros
          path: ./**/TEST.xml
  scenario-files-validation:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Scenario Files
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          find . -name "*.osc" | grep -Ev "lib_osc/*|examples/example_scenario_variation|scenario_execution_coverage|fail*|install|build" | while read -r file; do 
            echo "$file"; 
            ros2 run scenario_execution scenario_execution "$file" -n; 
          done
  test-example-ros-examples:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Example Ros Examples
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          #shellcheck disable=SC1083
          scenario_batch_execution -i examples/example_ros_examples/ -o test_ros_examples --ignore-process-return-value -- ros2 run scenario_execution_ros scenario_execution_ros {SCENARIO} -o {OUTPUT_DIR}
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-example-ros-examples-result
          path: test_example_ros-examples/test.xml
  test-example-scenario:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Example Scenario
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          #shellcheck disable=SC1083
          scenario_batch_execution -i examples/example_scenario/ -o test_example_scenario --ignore-process-return-value -- ros2 launch scenario_execution_ros scenario_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR}
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-example-scenario-result
          path: test_example_scenario/test.xml
  test-example-library:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Example Library
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          # shellcheck disable=SC1083
          scenario_batch_execution -i examples/example_library/scenarios -o test_example_library --ignore-process-return-value -- ros2 launch scenario_execution_ros scenario_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR}
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-example-library-result
          path: test_example_library/test.xml
  test-example-variation:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Example Variation
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          scenario_variation -o scenario_variation_out examples/example_scenario_variation/example_scenario_variation.osc
          # shellcheck disable=SC1083
          scenario_batch_execution -i scenario_variation_out -o test_example_variation --ignore-process-return-value -- ros2 launch scenario_execution_ros scenario_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR}
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-example-variation-result
          path: test_example_variation/test.xml
  test-example-nav2:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Example Nav2
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          Xvfb :1 -screen 0 800x600x16 &
          export DISPLAY=:1.0
          export -n CYCLONEDDS_URI
          export ROS_DOMAIN_ID=2
          export IGN_PARTITION=${HOSTNAME}:${GITHUB_RUN_ID}
          sed -i 's/60s/600s/g' examples/example_nav2/scenarios/example_nav2.osc
          # shellcheck disable=SC1083
          scenario_batch_execution -i examples/example_nav2/scenarios/ -o test_example_nav2 --ignore-process-return-value -- ros2 launch example_nav2 example_nav2_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR} headless:=True use_rviz:=False
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-example-nav2-result
          path: test_example_nav2/test.xml
  # test-example-simulation:
  #   needs: [build, build-and-push-testing]
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/cps-test-lab/scenario-execution:latest
  #     credentials:
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Restore cache
  #       uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
  #       with:
  #         key: ${{ runner.os }}-build-${{ github.run_number }}
  #         path: .
  #     - name: Test Example Simulation
  #       shell: bash
  #       run: |
  #         source /opt/ros/jazzy/setup.bash
  #         source install/setup.bash
  #         Xvfb :1 -screen 0 800x600x16 &
  #         export DISPLAY=:1.0
  #         export -n CYCLONEDDS_URI
  #         export ROS_DOMAIN_ID=2
  #         export IGN_PARTITION=${HOSTNAME}:${GITHUB_RUN_ID}
  #         sed -i 's/120s/600s/g' examples/example_simulation/scenarios/example_simulation.osc
  #         # shellcheck disable=SC1083
  #         scenario_batch_execution -i examples/example_simulation/scenarios/ -o test_example_simulation --ignore-process-return-value -- ros2 launch tb4_sim_scenario sim_nav_scenario_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR} headless:=True use_rviz:=False
  #     - name: Upload result
  #       uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
  #       if: always()
  #       with:
  #         name: test-example-simulation-result
  #         path: test_example_simulation/test.xml
  # test-example-multirobot:
  #   needs: [build, build-and-push-testing]
  #   runs-on: ubuntu-latest
  #   container:
  #     image: ghcr.io/cps-test-lab/scenario-execution:latest
  #     credentials:
  #       username: ${{ github.repository_owner }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
  #   steps:
  #     - name: Restore cache
  #       uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
  #       with:
  #         key: ${{ runner.os }}-build-${{ github.run_number }}
  #         path: .
  #     - name: Test Example Multirobot
  #       shell: bash
  #       run: |
  #         source /opt/ros/jazzy/setup.bash
  #         source install/setup.bash
  #         Xvfb :1 -screen 0 800x600x16 &
  #         export DISPLAY=:1.0
  #         export -n CYCLONEDDS_URI
  #         export ROS_DOMAIN_ID=2
  #         export IGN_PARTITION=${HOSTNAME}:${GITHUB_RUN_ID}
  #         sed -i 's/240s/900s/g' examples/example_multi_robot/scenarios/example_multi_robot.osc
  #         # shellcheck disable=SC1083
  #         scenario_batch_execution -i examples/example_multi_robot/scenarios/ -o test_example_multirobot --ignore-process-return-value -- ros2 launch tb4_sim_scenario sim_nav_scenario_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR} headless:=True use_rviz:=False
  #     - name: Upload result
  #       uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
  #       if: always()
  #       with:
  #         name: test-example-multirobot-result
  #         path: test_example_multirobot/test.xml
  #     - name: Convert video
  #       if: always()
  #       shell: bash
  #       run: |
  #         source /opt/ros/jazzy/setup.bash
  #         source /rosbag2_to_video/install/setup.bash
  #         ros2 bag to_video  -t /static_camera/image_raw -o test_example_multirobot/example_multi_robot/example-multi-robot.mp4  test_example_multirobot/example_multi_robot/rosbag2_* --fps 5 --codec mp4v
  #     - name: Upload video
  #       uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
  #       if: always()
  #       with:
  #         name: test-example-multirobot-video
  #         path: test_example_multirobot/example_multi_robot/example-multi-robot.mp4
  #     - name: Upload ros bag
  #       uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
  #       if: always()
  #       with:
  #         name: test-example-multirobot-ros-bag
  #         path: test_example_multirobot/**/rosbag*
  #         path: test_example_multirobot/example_multi_robot/example-multi-robot.mp4
  test-example-external-method:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Example External Method
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          export -n CYCLONEDDS_URI
          export ROS_DOMAIN_ID=2
          # shellcheck disable=SC1083
          scenario_batch_execution -i examples/example_external_method/scenarios -o test_example_external_method --ignore-process-return-value -- ros2 launch scenario_execution_ros scenario_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR} headless:=True
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-example-external-method-result
          path: test_example_external_method/test.xml
#  test-example-moveit2:
#    needs: [build, build-and-push-testing]
#    runs-on: ubuntu-latest
#    container:
#      image: ghcr.io/cps-test-lab/scenario-execution:latest
#      credentials:
#        username: ${{ github.repository_owner }}
#        password: ${{ secrets.GITHUB_TOKEN }}
#    steps:
#      - name: Restore cache
#        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
#        with:
#          key: ${{ runner.os }}-build-${{ github.run_number }}
#          path: .
#      - name: Test Example Moveit2
#        shell: bash
#        run: |
#          source /opt/ros/jazzy/setup.bash
#          source install/setup.bash
#          Xvfb :1 -screen 0 800x600x16 &
#          export DISPLAY=:1.0
#          export -n CYCLONEDDS_URI
#          export ROS_DOMAIN_ID=2
#          export IGN_PARTITION=${HOSTNAME}:${GITHUB_RUN_ID}
#          sed -i 's/60s/600s/g' examples/example_moveit2/example_moveit2.osc
#          # shellcheck disable=SC1083
#          scenario_batch_execution -i examples/example_moveit2/ -o test_example_moveit2  --ignore-process-return-value -- ros2 launch arm_sim_scenario sim_moveit_scenario_launch.py scenario:={SCENARIO} output_dir:={OUTPUT_DIR}
#      - name: Upload result
#        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
#        if: always()
#        with:
#          name: test-example-moveit2-result
  #         path: test_example_moveit2/test.xml
  test-scenario-execution-gazebo:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Scenario Execution Gazebo
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          Xvfb :1 -screen 0 800x600x16 &
          export DISPLAY=:1.0
          export -n CYCLONEDDS_URI
          export ROS_DOMAIN_ID=2
          export IGN_PARTITION=${HOSTNAME}:${GITHUB_RUN_ID}
          make test_scenario_execution_gazebo_test
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-scenario-execution-gazebo
          path: test_scenario_execution_gazebo/test.xml
  test-scenario-execution-nav2:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Scenario Execution Nav2
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          Xvfb :1 -screen 0 800x600x16 &
          export DISPLAY=:1.0
          export -n CYCLONEDDS_URI
          export ROS_DOMAIN_ID=2
          export IGN_PARTITION=${HOSTNAME}:${GITHUB_RUN_ID}
          make test_scenario_execution_nav2_test
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-scenario-execution-nav2
          path: test_scenario_execution_nav2/test.xml
  test-scenario-execution-pybullet:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Scenario Execution PyBullet
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          Xvfb :1 -screen 0 800x600x16 &
          export DISPLAY=:1.0
          sed -i 's/p.GUI/p.DIRECT/g' ./install/scenario_execution_pybullet/lib/python3.1*/site-packages/scenario_execution_pybullet/actions/sim_initialize.py
          ros2 run scenario_execution scenario_execution libs/scenario_execution_pybullet/scenarios/example_pybullet.osc -t -s 0.00416666666 -o test_scenario_execution_pybullet
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-scenario-execution-pybullet
          path: test_scenario_execution_pybullet/test.xml
  test-scenario-execution-x11:
    needs: [build, build-and-push-testing]
    runs-on: ubuntu-latest
    timeout-minutes: 3
    container:
      image: ${{ needs.build-and-push-testing.outputs.image_tag }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Test Scenario Execution X11
        shell: bash
        run: |
          source /opt/ros/jazzy/setup.bash
          source install/setup.bash
          sudo apt -y install mesa-utils
          Xvfb :1 -screen 0 800x600x16 &
          export DISPLAY=:1.0
          ros2 run scenario_execution_ros scenario_execution_ros  libs/scenario_execution_x11/scenarios/example_capture.osc -t -o test_scenario_execution_x11
          find test_scenario_execution_x11
      - name: Upload result
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-scenario-execution-x11
          path: test_scenario_execution_x11/test.xml
      - name: Upload video
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: always()
        with:
          name: test-scenario-execution-x11-video
          path: test_scenario_execution_x11/capture.mp4
  tests:
    needs: 
    - test-scenario-execution
    - test-scenario-execution-ros
    - scenario-files-validation
    - test-example-ros-examples
    - test-example-scenario
    - test-example-library
    - test-example-variation
    - test-example-nav2
#    - test-example-simulation
#    - test-example-multirobot
#    - test-example-moveit2
    - test-example-external-method
    - test-scenario-execution-gazebo
    - test-scenario-execution-nav2
    - test-scenario-execution-pybullet
    - test-scenario-execution-x11
    runs-on: ubuntu-latest
    if: ${{ always() }}
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@7a1cd3216ca9260cd8022db641d960b1db4d1be4 #v4.0
        with:
          path: downloaded-artifacts
      - name: Restore cache
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          key: ${{ runner.os }}-build-${{ github.run_number }}
          path: .
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@30eadd5010312f995f0d3b3cff7fe2984f69409e #v2.16.1
        with:
          check_name: Test Results
          action_fail: true
          comment_mode: always
          files: |
            downloaded-artifacts/test-scenario-execution/scenario_execution/TEST.xml
            downloaded-artifacts/test-scenario-execution/scenario_execution_coverage/TEST.xml
            downloaded-artifacts/test-scenario-execution/libs/scenario_execution_os/TEST.xml
            downloaded-artifacts/test-scenario-execution/test/scenario_execution_test/TEST.xml
            downloaded-artifacts/test-scenario-execution-ros/scenario_execution_ros/TEST.xml
            downloaded-artifacts/test-scenario-execution-ros/test/scenario_execution_ros_test/TEST.xml
            downloaded-artifacts/test-example-ros-examples-result/test.xml
            downloaded-artifacts/test-example-scenario-result/test.xml
            downloaded-artifacts/test-example-library-result/test.xml
            downloaded-artifacts/test-example-variation-result/test.xml
            downloaded-artifacts/test-example-nav2-result/test.xml
            downloaded-artifacts/test-example-external-method-result/test.xml
            downloaded-artifacts/test-scenario-execution-gazebo/test.xml
            downloaded-artifacts/test-scenario-execution-nav2/test.xml
            downloaded-artifacts/test-scenario-execution-pybullet/test.xml
#            downloaded-artifacts/test-example-moveit2-result/test.xml
#            downloaded-artifacts/test-example-multirobot-result/test.xml
#            downloaded-artifacts/test-example-simulation-result/test.xml
